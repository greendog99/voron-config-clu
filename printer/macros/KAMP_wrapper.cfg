[gcode_macro KAMP_CONDITIONALLY]
description: Only call BED_MESH_CALIBRATE if the dimensions are different from the last print.

# Variables to remember the print dimensions between prints.
variable_prev_x_min: 0
variable_prev_x_max: 0
variable_prev_y_min: 0
variable_prev_y_max: 0

gcode:
    # Calculate the design's dimensions the same way as KAMP.
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}  # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                     # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                     # Get bed mesh max from printer.cfg
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}           # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}           # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}           # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}           # Set y_max from largest object y point

    {% if printer.bed_mesh.profile_name != "" and prev_x_min == x_min and prev_y_min == y_min and prev_x_max == x_max and prev_y_max == y_max %}
      { action_respond_info("KAMP dimensions match previous mesh. Skipping mesh...") }
    {% else %}
      { action_respond_info("KAMP meshing needed for new set of dimensions...") }
      BED_MESH_CALIBRATE

      { action_respond_info("Saving KAMP dimensions for re-use.") }
      SET_GCODE_VARIABLE MACRO=KAMP_CONDITIONALLY VARIABLE=prev_x_min VALUE={ x_min }
      SET_GCODE_VARIABLE MACRO=KAMP_CONDITIONALLY VARIABLE=prev_x_max VALUE={ x_max }
      SET_GCODE_VARIABLE MACRO=KAMP_CONDITIONALLY VARIABLE=prev_y_min VALUE={ y_min }
      SET_GCODE_VARIABLE MACRO=KAMP_CONDITIONALLY VARIABLE=prev_y_max VALUE={ y_max }
    {% endif %}

